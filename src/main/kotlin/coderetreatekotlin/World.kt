/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package coderetreatekotlin

class World(var geographicalMap: List<List<Int>>) {

    fun life() =
        geographicalMap.mapIndexed{ row, list ->
                list.mapIndexed { col, cell ->
                    val liveNeighbours = countLiveNeighbours(row, col)

                    if ((cell == 1 && liveNeighbours == 2) || liveNeighbours == 3) {
                        1
                    } else {
                        0
                    }
                }
        }

    private fun countLiveNeighbours(row: Int, col: Int): Int   =
                cellOf(row - 1, col - 1) + cellOf(row - 1, col) + cellOf(row - 1, col + 1) +
                        cellOf(row, col - 1) + /*map[row][col]*/ +cellOf(row, col + 1) +
                        cellOf(row + 1, col - 1) + cellOf(row + 1, col) + cellOf(row + 1, col + 1)


    private fun cellOf(rowGetter: Int, colGetter: Int): Int = geographicalMap
                .getOrElse(rowGetter) { emptyList<Int>() }
                .getOrElse(colGetter) { 0 }

}

fun main(args: Array<String>) {
    println(World(listOf(
            listOf(0,0,0,0,0),
            listOf(0,0,0,0,0),
            listOf(0,1,1,1,0),
            listOf(0,0,0,0,0),
            listOf(0,0,0,0,0)
            )).life())
}
