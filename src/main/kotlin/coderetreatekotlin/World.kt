/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package coderetreatekotlin

class World(var geographicalMap: List<List<Boolean>>) {

    fun tick(): List<List<Boolean>> {
        this.geographicalMap = life()
        return this.geographicalMap
    }

    fun life() = geographicalMap.mapIndexed { row, list ->
        list.mapIndexed { col, cell ->
            next(cell, countLiveNeighbours(row, col))
        }
    }

    private fun next(cell: Boolean, noLiveNeighbours: Int) =
            when (noLiveNeighbours) {
                3 -> true
                2 -> cell
                else -> false
            }


    private fun countLiveNeighbours(row: Int, col: Int): Int =
            cellOf(row - 1, col - 1) + cellOf(row - 1, col) + cellOf(row - 1, col + 1) +
                    cellOf(row, col - 1) + /*map[row][col]*/ +cellOf(row, col + 1) +
                    cellOf(row + 1, col - 1) + cellOf(row + 1, col) + cellOf(row + 1, col + 1)


    private fun cellOf(rowGetter: Int, colGetter: Int) =
            when (geographicalMap
                    .getOrElse(rowGetter) { emptyList<Int>() }
                    .getOrElse(colGetter) { false }) {
                true -> 1
                else -> 0
            }
}

fun nicePrint(worldMap: List<List<Boolean>>) =
        worldMap.forEach {
            it.forEach {
                when (it) {
                    true -> print(" 1 ")
                    else -> print(" 0 ")
                }
            }
            println()
        }

fun main() {
    val world = World(listOf(
            listOf(false, false, false, false, false),
            listOf(false, false, false, false, false),
            listOf(false, true, true, true, false),
            listOf(false, false, false, false, false),
            listOf(false, false, false, false, false)
    ))
    (1..4).forEach {
        nicePrint(world.tick())
        println()
    }
}
